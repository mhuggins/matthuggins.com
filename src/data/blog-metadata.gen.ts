// Auto-generated metadata - do not edit manually
// Generated by scripts/generate-blog-metadata.ts

import type { BlogPostMetadata } from "@/types/blog";

export const blogMetadata: BlogPostMetadata[] = [
  {
    "slug": "parsing-domain-names-now-in-gem-form",
    "filePath": "parsing-domain-names-now-in-gem-form.md",
    "title": "Parsing Domain Names - Now in Gem Form!",
    "date": "2015-01-02",
    "summary": "A feature for an internal Ruby project here at Quick Left necessitated parsing the domain from a URL. This seems like a problem for which there must already exist a solution, but it surprisingly turns out that there is no available solution for this seemingly simple task.",
    "tags": [
      "ruby"
    ]
  },
  {
    "slug": "building-an-open-source-loader-for-react",
    "filePath": "building-an-open-source-loader-for-react.md",
    "title": "Building an Open-Source Loader for React",
    "date": "2014-09-16",
    "summary": "Sometimes when building client projects, it quickly becomes clear when some code is going to be used and reused. Such is the case with a loader implementation for Gociety, a mobile app we recently worked on that uses React. When that happens, we like to give back -- and what better way than to open-source some code for others to use?",
    "tags": [
      "react",
      "javascript"
    ]
  },
  {
    "slug": "april-fools-how-we-converted-our-site-to-doge-in-just-40-lines-of-code",
    "filePath": "april-fools-how-we-converted-our-site-to-doge-in-just-40-lines-of-code.md",
    "title": "April Fools! How We Converted Our Site to Doge in Just 40 Lines of Code",
    "date": "2014-04-01",
    "summary": "I recently wrote a blog post describing how to create your own RubyGem. The sample gem produced, aptly named dogeify, converts English sentences into \"Doge\" based upon the recently popular meme. For April Fools' Day, we thought it would be fun to implement this gem to convert our entire site into doge. Here's how we did it.",
    "tags": [
      "ruby"
    ]
  },
  {
    "slug": "step-by-step-guide-to-building-your-first-ruby-gem",
    "filePath": "step-by-step-guide-to-building-your-first-ruby-gem.md",
    "title": "Step-by-Step Guide to Building Your First Ruby Gem",
    "date": "2014-03-08",
    "summary": "Building your first Ruby gem may seem like a daunting task, but it's actually not so bad. It's quite rewarding to not only release a gem, but to see its download count climb as others put your hard work to good use, and even still as others offer to contribute new features and bug fixes to your very own gem. And thanks to RubyGems.org and Bundler, the process of creating, releasing, and implementing gems couldn't be easier.",
    "tags": [
      "ruby"
    ]
  },
  {
    "slug": "using-faux-activerecord-models-in-rails-3",
    "filePath": "using-faux-activerecord-models-in-rails-3.md",
    "title": "Using Faux ActiveRecord Models in Rails 3",
    "date": "2014-01-04",
    "summary": "Implementing forms that are associated with models -- specifically ActiveRecord objects -- is pretty common when developing with Ruby on Rails. In fact, the built-in FormHelper assumes that you're working with some kind of persisted object.\n\nBut what happens when you want to create a form for something that is not persisted by an ActiveRecord model?\n",
    "tags": [
      "ruby",
      "ruby on rails"
    ]
  }
];
